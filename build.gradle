import org.flywaydb.gradle.task.FlywayMigrateTask

plugins {
    id 'application'
    id 'checkstyle'
    id 'com.github.ben-manes.versions' version '0.29.0'
    id 'org.springframework.boot' version '2.3.3.RELEASE'
    id 'io.spring.dependency-management' version '1.0.10.RELEASE'
    id 'org.flywaydb.flyway' version '6.5.4'
    id 'org.owasp.dependencycheck' version '5.3.2.1'
    id 'org.sonarqube' version '3.0'
    id 'jacoco'
}

repositories {
    mavenLocal()
    maven {
        url "https://dl.bintray.com/hmcts/hmcts-maven"
    }
    maven {
        url = 'https://app.camunda.com/nexus/content/repositories/camunda-bpm-ee'
        credentials {
            username "$CAMUNDA_NEXUS_USER"
            password "$CAMUNDA_NEXUS_PASSWORD"
        }
    }

    jcenter()
    mavenCentral()
}

// before committing a change, make sure task still works
dependencyUpdates {
  def isNonStable = { String version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA', 'ee'].any { qualifier -> version.toUpperCase().contains(qualifier) }
    def regex = /^[0-9,.v-]+(-r)?$/
    return !stableKeyword && !(version ==~ regex)
  }
  rejectVersionIf { selection -> // <---- notice how the closure argument is named
    return isNonStable(selection.candidate.version) && !isNonStable(selection.currentVersion)
  }
}

def versions = [
        logging: '5.1.7',
]

checkstyle {
    maxWarnings = 0
    toolVersion = '8.21'
    // need to set configDir to rootDir otherwise submodule will use submodule/config/checkstyle
    getConfigDirectory().set(new File(rootDir, 'config/checkstyle'))
}

// https://jeremylong.github.io/DependencyCheck/dependency-check-gradle/configuration.html
dependencyCheck {
    // Specifies if the build should be failed if a CVSS score above a specified level is identified.
    // range of 0-10 fails the build, anything greater and it doesn't fail the build
    failBuildOnCVSS = System.getProperty('dependencyCheck.failBuild') == 'true' ? 0 : 11
    suppressionFile = 'config/owasp/suppressions.xml'
    analyzers {
        // Disable scanning of .NET related binaries
        assemblyEnabled = false
    }
}

sourceSets {
    smokeTest {
        java {
            compileClasspath += main.output
            runtimeClasspath += main.output
            srcDir file('src/smokeTest/java')
        }
        resources.srcDir file('src/smokeTest/resources')
    }
    functionalTest {
        java {
            compileClasspath += main.output
            runtimeClasspath += main.output
            srcDir file('src/functionalTest/java')
        }
        resources.srcDir file('src/functionalTest/resources')
    }

}

task smoke(type: Test) {
    description = "Runs Smoke Tests"
    testClassesDirs = sourceSets.smokeTest.output.classesDirs
    classpath = sourceSets.smokeTest.runtimeClasspath
}

task functional(type: Test, description: 'Runs the functional tests.', group: 'Verification') {
    testClassesDirs = sourceSets.functionalTest.output.classesDirs
    classpath = sourceSets.functionalTest.runtimeClasspath
}

jacocoTestReport {
    executionData(test)
    reports {
        xml.enabled = true
        csv.enabled = false
        xml.destination file("${buildDir}/reports/jacoco/test/jacocoTestReport.xml")
    }
}

sonarqube {
    properties {
        property "sonar.projectName", "Reform :: camunda-bpm"
        property "sonar.projectKey", "uk.gov.hmcts.reform:camunda-bpm"
        property "sonar.jacoco.reportPath", "${project.buildDir}/jacoco/test.exec"
        property "sonar.coverage.exclusions", "**/config/**"
    }
}

ext["rest-assured.version"] = '4.3.1'

dependencyManagement {
    imports {
        mavenBom 'org.camunda.bpm.extension.springboot:camunda-bpm-spring-boot-starter-bom:2.2.0'
    }
    imports {
        mavenBom 'org.camunda.bpm:camunda-bom:7.13.3-ee'
    }
}

dependencies {
    implementation 'org.camunda.bpm.springboot:camunda-bpm-spring-boot-starter-webapp-ee:7.13.0-ee'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-jdbc'
    implementation 'org.springframework.security.oauth:spring-security-oauth2:2.5.0.RELEASE'
    implementation 'org.camunda.bpm.springboot:camunda-bpm-spring-boot-starter-rest:7.13.0'
    implementation 'org.camunda.spin:camunda-spin-dataformat-all:1.9.0'
    implementation 'org.camunda.bpm:camunda-engine-plugin-spin'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.postgresql:postgresql:42.2.15'
    implementation 'org.flywaydb:flyway-core:6.5.5'

    implementation group: 'uk.gov.hmcts.reform', name: 'logging', version: versions.logging
    implementation group: 'uk.gov.hmcts.reform', name: 'logging-appinsights', version: versions.logging
    implementation group: 'uk.gov.hmcts.reform', name: 'properties-volume-spring-boot-starter', version: '0.1.0'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.camunda.bpm.extension:camunda-bpm-assert:1.2'
    testImplementation 'org.camunda.bpm.extension:camunda-bpm-assert-scenario:1.0.0'
    testImplementation 'org.slf4j:jul-to-slf4j:1.7.30'
    testImplementation 'org.testcontainers:postgresql:1.14.3'

    smokeTestImplementation sourceSets.main.runtimeClasspath
    smokeTestImplementation sourceSets.test.runtimeClasspath
    smokeTestImplementation group: 'io.rest-assured', name: 'rest-assured'

}

group = 'uk.gov.hmcts.reform'
version = '1.0-SNAPSHOT'
description = 'Camunda BPM Spring Boot Application'
sourceCompatibility = '11'
targetCompatibility = '11'

mainClassName = 'uk.gov.hmcts.reform.camunda.bpm.CamundaApplication'

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}




flyway {
    url = System.getenv('FLYWAY_URL')
    user = System.getenv('FLYWAY_USER')
    password = System.getenv('FLYWAY_PASSWORD')
    baselineOnMigrate = true
    baselineVersion = '000'
}

task migratePostgresDatabase(type: FlywayMigrateTask) {
    baselineOnMigrate = true
    if (project.hasProperty("dburl")) {
        url = "jdbc:postgresql://${dburl}"
    }
}

bootJar {

    archiveFileName = "${archiveBaseName.get()}.${archiveExtension.get()}"

    manifest {
        attributes 'Implementation-Title': project.name,
                'Implementation-Version': project.version
    }
}

configurations.all {
    resolutionStrategy {
        eachDependency { DependencyResolveDetails details ->
            if (details.requested.group in ['com.fasterxml.jackson.core', 'com.fasterxml.jackson.module', 'com.fasterxml.jackson.datatype']) {
                details.useVersion '2.11.2'
            }
            if (details.requested.group in ['org.apache.tomcat.embed']) {
                details.useVersion '9.0.37'
            }
            // Rest Assured 4.3.0 uses groovy 3
            if (details.requested.group in ['org.codehaus.groovy']) {
                details.useVersion '3.0.5'
            }
        }
    }
}

wrapper {
    distributionType = Wrapper.DistributionType.ALL
}
