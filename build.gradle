import org.flywaydb.gradle.task.FlywayMigrateTask

buildscript {
    dependencies {
        classpath("org.flywaydb:flyway-database-postgresql:11.9.1")
    }
}

plugins {
    id 'application'
    id 'jacoco'
    id 'checkstyle'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'com.github.ben-manes.versions' version '0.52.0'
    id 'org.springframework.boot' version '3.3.5'
    id 'org.flywaydb.flyway' version '11.9.1'
    id 'org.owasp.dependencycheck' version '12.1.3'
    id 'org.sonarqube' version '6.2.0.5505'
}

repositories {
    mavenLocal()
    mavenCentral()
    maven { url = 'https://pkgs.dev.azure.com/hmcts/Artifacts/_packaging/hmcts-lib/maven/v1' }
    maven {
        url = 'https://artifacts.camunda.com/artifactory/camunda-bpm-ee/'
        credentials {
            def userEnvVar = System.getenv('CAMUNDA_NEXUS_USER')
            def passEnvVar = System.getenv('CAMUNDA_NEXUS_PASSWORD')

            username userEnvVar == null ? "$CAMUNDA_NEXUS_USER" :  userEnvVar
            password passEnvVar == null ? "$CAMUNDA_NEXUS_PASSWORD" : passEnvVar

        }
    }
}

// before committing a change, make sure task still works
dependencyUpdates {
    def isNonStable = { String version ->
        def stableKeyword = ['RELEASE', 'FINAL', 'GA', 'ee'].any { qualifier -> version.toUpperCase().contains(qualifier) }
        def regex = /^[0-9,.v-]+(-r)?$/
        return !stableKeyword && !(version ==~ regex)
    }
    rejectVersionIf { selection -> // <---- notice how the closure argument is named
        return isNonStable(selection.candidate.version) && !isNonStable(selection.currentVersion)
    }
}

checkstyle {
    maxWarnings = 0
    toolVersion = '10.21.0'
    // need to set configDir to rootDir otherwise submodule will use submodule/config/checkstyle
    getConfigDirectory().set(new File(rootDir, 'config/checkstyle'))
}

// https://jeremylong.github.io/DependencyCheck/dependency-check-gradle/configuration.html
dependencyCheck {
    // Specifies if the build should be failed if a CVSS score above a specified level is identified.
    // range of 0-10 fails the build, anything greater and it doesn't fail the build
    failBuildOnCVSS = System.getProperty('dependencyCheck.failBuild') == 'true' ? 0 : 11
    suppressionFile = 'config/owasp/suppressions.xml'
    analyzers.assemblyEnabled = false

    //CVE Scanning only relevant to production code that is published, not test or other implementations
    scanConfigurations += 'releaseCompileClasspath'
}

sourceSets {

    testUtils {
        java {
            compileClasspath += main.output
            runtimeClasspath += main.output
            srcDir file('src/testUtils/java')
        }
        resources.srcDir file('src/testUtils/resources')
    }

    smokeTest {
        java {
            compileClasspath += main.output
            runtimeClasspath += main.output
            srcDir file('src/smokeTest/java')
        }
        resources.srcDir file('src/smokeTest/resources')
    }

    functionalTest {
        java {
            compileClasspath += testUtils.output
            runtimeClasspath += testUtils.output
            srcDir file('src/functionalTest/java')
        }
        resources.srcDir file('src/functionalTest/resources')
    }

    integrationTest {
        java {
            compileClasspath += testUtils.output
            runtimeClasspath += testUtils.output
            srcDir file('src/integrationTest/java')
        }
        resources.srcDir file('src/integrationTest/resources')
    }


}

task smoke(type: Test) {
    description = "Runs Smoke Tests"
    testClassesDirs = sourceSets.smokeTest.output.classesDirs
    classpath = sourceSets.smokeTest.runtimeClasspath
}

task functional(type: Test, description: 'Runs the functional tests.', group: 'Verification') {
    testClassesDirs = sourceSets.functionalTest.output.classesDirs
    classpath = sourceSets.functionalTest.runtimeClasspath
}

task integration(type: Test) {
    description = "Runs integration tests"
    group = "Verification"
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
    failFast = true
}

jacocoTestReport {
    executionData(test, integration)
    reports {
        xml.required = true
        csv.required = false
    }
}

project.tasks['sonarqube'].dependsOn test, integration, jacocoTestReport

sonarqube {
    properties {
        property "sonar.projectName", "Reform :: camunda-bpm"
        property "sonar.projectKey", "uk.gov.hmcts.reform:camunda-bpm"
        property "sonar.coverage.exclusions", "**/config/**"
    }
}

dependencyManagement {
    dependencies {
        imports {
            // Before upgrading, please copy relevant migration scripts in src/main/resources/db/migration/ from https://github.com/camunda/camunda-bpm-platform/blob/master/engine/src/main/resources/org/camunda/bpm/engine/db/upgrade/
            mavenBom 'org.camunda.bpm:camunda-bom:7.21.0-ee'
        }
    }
}

dependencies {
    implementation 'org.camunda.bpm.springboot:camunda-bpm-spring-boot-starter-webapp-ee'
    implementation 'org.camunda.bpm.springboot:camunda-bpm-spring-boot-starter-rest'

    implementation 'org.camunda.spin:camunda-spin-dataformat-all'

    implementation 'org.camunda.bpm:camunda-engine-plugin-spin'
    implementation group: 'org.camunda.bpm', name: 'camunda-engine-spring-6'

    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-jdbc'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation group: 'jakarta.servlet', name: 'jakarta.servlet-api'
    
    implementation 'org.postgresql:postgresql:42.7.7'
    implementation 'org.flywaydb:flyway-core:11.9.1'
    // JAX-B dependencies for JDK 9+
    implementation group: 'com.sun.xml.bind', name: 'jaxb-impl', version: '4.0.5'

    implementation group: 'com.github.hmcts.java-logging', name: 'logging', version: '6.1.9'
    implementation group: 'com.github.hmcts', name: 'service-auth-provider-java-client', version: '5.3.3'
    implementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-openfeign', version: '4.1.4'
    implementation group: 'io.github.openfeign', name: 'feign-jackson', version: '13.6'
    implementation group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.14'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    testImplementation 'org.camunda.bpm.extension:camunda-bpm-assert:1.2'
    testImplementation 'org.camunda.bpm.extension:camunda-bpm-assert-scenario:1.1.1'

    testImplementation 'org.slf4j:jul-to-slf4j:2.0.17'
    testImplementation 'org.testcontainers:postgresql:1.21.1'
    testImplementation group: 'com.github.tomakehurst', name:'wiremock-standalone', version: '3.0.1'
    testImplementation "org.junit.vintage:junit-vintage-engine"

    testImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test', {
        exclude group: 'junit', module: 'junit'
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }

    testUtilsImplementation sourceSets.main.runtimeClasspath
    testUtilsImplementation sourceSets.test.runtimeClasspath

    integrationTestImplementation sourceSets.main.runtimeClasspath
    integrationTestImplementation sourceSets.test.runtimeClasspath
    integrationTestImplementation "org.junit.vintage:junit-vintage-engine"

    smokeTestImplementation sourceSets.main.runtimeClasspath
    smokeTestImplementation sourceSets.test.runtimeClasspath
    functionalTestImplementation sourceSets.main.runtimeClasspath
    functionalTestImplementation sourceSets.test.runtimeClasspath
    smokeTestImplementation group: 'io.rest-assured', name: 'rest-assured'
    functionalTestImplementation group: 'io.rest-assured', name: 'rest-assured'

}

group = 'uk.gov.hmcts.reform'
version = '1.0-SNAPSHOT'
description = 'Camunda BPM Spring Boot Application'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

mainClassName = 'uk.gov.hmcts.reform.camunda.bpm.CamundaApplication'

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

tasks.withType(Test) {
    useJUnitPlatform()

    testLogging {
        exceptionFormat = 'full'
    }
}

flyway {
    url = System.getenv('FLYWAY_URL')
    user = System.getenv('FLYWAY_USER')
    password = System.getenv('FLYWAY_PASSWORD')
    baselineOnMigrate = true
    baselineVersion = '000'
}

tasks.withType(Copy) {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

task migratePostgresDatabase(type: FlywayMigrateTask) {
    baselineOnMigrate = true
    if (project.hasProperty("dburl")) {
        url = "jdbc:postgresql://${dburl}"
    }
}

bootJar {

    archiveFileName = "${archiveBaseName.get()}.${archiveExtension.get()}"

    manifest {
        attributes 'Implementation-Title': project.name,
                'Implementation-Version': project.version
    }
}

test {
    reports {
        junitXml.required = true
    }
}

wrapper {
    distributionType = Wrapper.DistributionType.ALL
}
